name: Tests

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

defaults:
  run:
    shell: bash -l {0}

env:
  CACHE_EPOCH: 0
  BINDER_ENV: .binder/environment.yml

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Cache conda
        uses: actions/cache@v3
        with:
          path: ~/conda_pkgs_dir
          key: |
            ${{ env.CACHE_EPOCH }}-${{ runner.os }}-conda-${{ hashFiles(env.BINDER_ENV) }}
          restore-keys: ${{ env.CACHE_EPOCH }}-${{ runner.os }}-conda-

      - name: Cache JS
        uses: actions/cache@v3
        with:
          path: node_modules
          key: |
            ${{ env.CACHE_EPOCH }}-node-modules-${{ runner.os }}-${{ hashFiles('yarn.lock') }}

      - name: Setup conda
        uses: conda-incubator/setup-miniconda@v2
        with:
          environment-file: ${{ env.BINDER_ENV }}
          miniforge-variant: Mambaforge
          use-mamba: true
          use-only-tar-bz2: true

      - name: Build Python packages
        run: pyproject-build --sdist --wheel

      - name: Check built packages
        run: twine check dist/*

      - name: Build NPM package
        run: cd dist && npm pack --ignore-scripts ..

      - name: Hash Distributions
        run: cd dist && sha256sum * | tee SHA256SUMS

      - name: Upload Distributions
        uses: actions/upload-artifact@v3
        with:
          name: jupyterlab_robotmode dist ${{ github.run_number }}
          path: ./dist

      - name: Install jupyterlab_robotmode
        run:
          python -m pip install -e . --no-build-isolation --no-deps
          --install-option="--skip-npm"

      - name: Run frontend unit tests
        run: jlpm test

  test:
    needs: [build]
    runs-on: ${{ matrix.os }}-latest
    strategy:
      matrix:
        os: [ubuntu, windows, macos]
        python-version: ['3.7', '3.10']
        lab-version: ['3']
        include:
          - python-version: '3.7'
            dist: jupyterlab_robotmode*.tar.gz
          - python-version: '3.10'
            dist: jupyterlab_robotmode*.whl
          - os: windows
            py-cmd: python
          - os: macos
            py-cmd: python
          - os: ubuntu
            py-cmd: python

    steps:
      - name: Install Python
        uses: actions/setup-python@v3
        with:
          python-version: ${{ matrix.python-version }}

      - name: Download Distributions
        uses: actions/download-artifact@v3
        with:
          name: jupyterlab_robotmode dist ${{ github.run_number }}
          path: ./dist

      - name: Install Setup Dependencies
        run: |
          set -eux
          ${{ matrix.py-cmd }} -m pip install --upgrade pip wheel build

      - name: Get Python Cache Location and Distribution
        id: cache-pip
        shell: bash -l {0}
        run: |
          set -eux
          echo "::set-output name=dir::$(${{ matrix.py-cmd }} -m pip cache dir)"

      - name: Cache Python Dependencies
        uses: actions/cache@v3
        with:
          path: ${{ steps.cache-pip.outputs.dir }}
          key: |
            ${{ env.CACHE_EPOCH }}-${{ runner.os }}-pip-install-${{ matrix.python-version }}-${{ matrix.lab-version }}
          restore-keys: |
            ${{ env.CACHE_EPOCH }}-${{ runner.os }}-pip-install-${{ matrix.python-version }}-
            ${{ env.CACHE_EPOCH }}-${{ runner.os }}-pip-

      - name: Install Dependencies
        run: |
          set -eux
          ${{ matrix.py-cmd }} -m pip install 'jupyterlab==${{ matrix.lab-version }}.*'

      - name: Install Distribution
        run: |
          set -eux
          cd dist
          ${{ matrix.py-cmd }} -m pip install -v ${{ matrix.dist }}

      - name: Check labextension
        run: |
          set -eux
          ${{ matrix.py-cmd }} -m jupyter labextension list
          ${{ matrix.py-cmd }} -m jupyter labextension list 2>&1 | grep -ie "@marketsquare/jupyterlab_robotmode.*enabled.*ok" -
