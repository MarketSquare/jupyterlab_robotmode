name: Tests

on:
  push:
    branches: [main, 0.4.x]
  pull_request:
    branches: [main, 0.4.x]

env:
  CACHE_EPOCH: 1
  BINDER_ENV: .binder/environment.yml

jobs:
  build:
    runs-on: ubuntu-latest

    defaults:
      run:
        shell: bash -l {0}

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Cache JS
        uses: actions/cache@v3
        with:
          path: node_modules
          key: |
            ${{ env.CACHE_EPOCH }}-node-modules-${{ runner.os }}-${{ hashFiles('yarn.lock') }}

      - name: Setup conda
        uses: conda-incubator/setup-miniconda@v2
        with:
          environment-file: ${{ env.BINDER_ENV }}
          miniforge-variant: Mambaforge
          use-mamba: true

      - name: Install JS deps
        run: jlpm --prefer-offline --ignore-optional

      - name: Build JS
        run: jlpm build:prod

      - name: Build Python packages
        run: pyproject-build --sdist --wheel --no-isolation

      - name: Check built packages
        run: twine check dist/*

      - name: Build NPM package
        run: cd dist && npm pack --ignore-scripts ..

      - name: Hash Distributions
        run: cd dist && sha256sum * | tee SHA256SUMS

      - name: Upload Distributions
        uses: actions/upload-artifact@v3
        with:
          name: jupyterlab_robotmode_dist_${{ github.run_number }}
          path: ./dist

      - name: Install jupyterlab_robotmode
        run: |-
          set -eux
          cd dist && python -m pip install -vv --no-deps --ignore-installed $(ls *.whl)

      - name: Run frontend unit tests
        run: jlpm test

      - name: Lint Python
        run: |-
          set -eux
          black --check setup.py jupyterlab_robotmode
          ruff setup.py jupyterlab_robotmode

  test:
    needs: [build]
    runs-on: ${{ matrix.os }}-latest
    strategy:
      matrix:
        os: [ubuntu, windows, macos]
        python-version: ['3.8', '3.11']
        include:
          - python-version: '3.8'
            dist: sdist
          - python-version: '3.11'
            dist: wheel
          - os: windows
            pip-cache: ~\AppData\Local\pip\Cache
          - os: macos
            pip-cache: ~/Library/Caches/pip
          - os: ubuntu
            pip-cache: ~/.cache/pip

    steps:
      - name: Install Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Download Distributions
        uses: actions/download-artifact@v3
        with:
          name: jupyterlab_robotmode_dist_${{ github.run_number }}
          path: ./dist

      - name: Cache Python Dependencies
        uses: actions/cache@v3
        with:
          path: ${{ matrix.pip-cache }}
          key: |
            ${{ env.CACHE_EPOCH }}-${{ runner.os }}-pip-${{ matrix.python-version }}

      - name: Use SDist
        if: matrix.dist == 'sdist'
        shell: bash -l {0}
        run: |
          cd dist
          echo "DIST_NAME=$(ls *.tar.gz)" >> "$GITHUB_ENV"

      - name: Use Wheel
        if: matrix.dist == 'wheel'
        shell: bash -l {0}
        run: |
          cd dist
          echo "DIST_NAME=$(ls *.whl)" >> "$GITHUB_ENV"

      - name: Install Setup Dependencies
        run: |
          python -m pip install --upgrade pip wheel build setuptools

      - name: Install Distribution
        run: |
          cd dist
          python -m pip install -v ${{ env.DIST_NAME }}

      - name: List Python Environment
        run: |
          python -m pip list --format=freeze
          python --version

      - name: Check labextension
        run: |
          set -eux
          python -m jupyter labextension list
          python -m jupyter labextension list 2>&1 | grep -iE "@marketsquare/jupyterlab_robotmode.*enabled.*ok" -
